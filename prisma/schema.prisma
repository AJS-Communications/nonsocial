// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int            @id @default(autoincrement())
  email      String         @unique
  username   String         @unique
  photoUrl   String
  name       String?        @db.VarChar(100)
  bio        String?        @db.VarChar(500)
  role       UserRole       @default(UNVERIFIED)
  visibility UserVisibility @default(PUBLIC)
  posts      Post[]
  following  Follow[]       @relation("following")
  followers  Follow[]       @relation("follower")
  bookmarks  Bookmark[]
  likes  Like[]
  boosts    Boost[]
}

enum UserVisibility {
  PRIVATE
  PUBLIC
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdDate DateTime @default(now())
  author      User     @relation("follower", fields: [authorId], references: [id])
  authorId    Int
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId Int
}

enum UserRole {
  UNVERIFIED
  GUEST
  USER
  EDITOR
  ADMIN
}

model Post {
  id          Int        @id @default(autoincrement())
  text        String     @db.VarChar(1000)
  published   Boolean    @default(false)
  createdDate DateTime   @default(now())
  author      User       @relation(fields: [authorId], references: [id])
  authorId    Int
  visibility  Visibility @default(PUBLIC)
  parentId    Int?
  bookmarks   Bookmark[]
  likes   Like[]
  boosts     Boost[]
}

enum Visibility {
  PRIVATE
  PUBLIC
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  published   Boolean  @default(false)
  createdDate DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int

  @@unique([authorId, postId])
}

model Like {
  id          Int      @id @default(autoincrement())
  published   Boolean  @default(false)
  createdDate DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int

  @@unique([authorId, postId])
}

model Boost {
  id          Int      @id @default(autoincrement())
  published   Boolean  @default(false)
  createdDate DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int

  @@unique([authorId, postId])
}
